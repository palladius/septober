#!/usr/bin/env ruby -wKU

=begin
  ############################################################
	# $Id: script.rb 5582 2011-01-18 15:18:36Z rcarlesso $
  ##########################################################
  @author:    Riccardo Carlesso
  @email:     riccardo.carlesso@heanet.ie
  @maturity:  development
  @language:  Ruby
  @synopsis:  Brief Description here
	@tags:      development, rcarlesso
  @description:
   septober.heroku.com client to add and list todos!
   
  @history:
   0.9.2 2011-02-04 'add' operation succefully added!   
   0.9.1 2011-01-18 First version
 ############################################################
=end

  require 'optparse'       
  require 'rubygems'
  require 'ric'
  require 'active_resource'
  require 'socket'
  
  $PROG_VER = '0.9.2'
  $DEBUG    = false
  
  $myconf = {
    :app_name            => 'septober client',
    :foo_arr             => %w{ bar baz },
    :hello               => 'Welcome to this terrific application',
    :septober_url        => 'http://septober.heroku.com/' , 
    :dflt_config         => '~/.septober.yml' , 
  }

  class RemoteTodo < ActiveResource::Base
    self.site = "http://septober.example.com/" # uninitialized
    self.element_name = 'todo'
    @@sample_yml_config = 'septober: 
       # YAML file with septober configuration. For more info: http://septober.heroku.com/
       site: "http://localhost:3000/api/"   # or http://septober.heroku.com/api/
       user: guest
       password: guest'
    
    # self.ssl_options = {:cert         => OpenSSL::X509::Certificate.new(File.open(pem_file))
    #                        :key          => OpenSSL::PKey::RSA.new(File.open(pem_file)),
    #                        :ca_path      => "/path/to/OpenSSL/formatted/CA_Certs",
    #                        :verify_mode  => OpenSSL::SSL::VERIFY_PEER}
    
    def self.import_config(file=nil)
      file ||= $myconf[:dflt_config]
      real_file = File.expand_path file
      deb "Importing config from #{file}.."
      if File.exists?(real_file)
        #puts "TODO import from #{file}"
        conf_hash = YAML.load_file(real_file)['septober'] rescue nil
        self.site = conf_hash['site']
        self.user = conf_hash['user']
        self.password = conf_hash['password']
        deb "Conf imported successuflly: #{blue self.user} @ #{azure self.site}"
      else
        pred "Missing file: #{file} !!! Try to do the following:"
        puts "cat > #{file}\n#{@@sample_yml_config rescue "Err#{$!}" }"
        exit 79
      end
    end
    
    def to_s
      self.name
    end
    
    def colored_project_name()
      colora(project.color || :grey ,project.name)
    end
    
    # TODO put this into todo.rb model and add it to the controller like "cli_colored_string" and "cli_neutral_string"
    def colored_due_explaination(override_explaination=nil)
      mycolor = case due_explaination
        when 'overdue' ; :red 
        when 'close' ;   :yellow 
        when 'far' ;     :green 
      end
      return colora(mycolor, override_explaination || due_explaination)
    end

    def show_entry(opts={})
      mywhere = where ? azure( " @#{where}") : ''
      return sprintf "%-3d %-30s [P%d] %s %s%s",
        id, colored_project_name , priority, colored_due_explaination(due), name, mywhere
    end
    
    def show_full_entry(opts={})
      attributes = %w{name id due where url progress_status active description }
      key_vals = attributes.map{|attr| [attr,send(attr)] } # array of [key, val]
      key_vals << ['ProjectName', project.name ]
      key_vals.map{ |k,v| "#{k}: #{v}" }.join("\n")
    end
  end # /RemoteTodo
  
  
  #############################
  # Program start..
  
  def usage(comment=nil)
    puts "#{$0} v.#{$PROG_VER}"
    puts "Usage: #{File.basename $0} [-dhjv] [-c LOGFILE] [--no-colors] OPTIONS"
    puts "  list            # shows a list of your todos yet to complete"
    puts "  show <ID>       # shows details about todo with id=ID"
    #puts "  done <ID>       # TODO sets todo ID to done/resolved"
    puts "  add <FREE TEXT> # TODO adds new task in free text"
    #puts "  search <QUERY>  # look for TODOs relating to 'QUERY' string"
    pred comment if comment
    exit 78
  end

  def todo_list(opts={})
    show_only_active = opts.fetch :only_active, true
    puts "# Todo.Index (user: #{blue RemoteTodo.user})"
    all = RemoteTodo.find(:all)
    all.each{|todo|
      puts( todo.show_entry ) unless( show_only_active && ! todo.active )
    } if all
  end
  
  def todo_add(words_from_argv)
    puts "# Todo.Add(#{words_from_argv}) (user: #{blue RemoteTodo.user})"
    t = RemoteTodo.create( 
      :name => words_from_argv, 
      :description => "sent by CLI #{$0} v.#{$PROG_VER}, due tomorrow by test", 
      #:due => Date.tomorrow, 
      :where => Socket.gethostname,
      :source => "CLI v.#{$PROG_VER}"
      #:project_id => 5,
      #:priority => 4 
    )
    puts "todo: #{t}"
    ret = t.save
    puts "ret: #{ret}"
    puts "Todo created successfully:\n  #{t.inspect}" if ret
    pred "TODO get meaningful explaination from api/todos_controller!"
    #puts "errors: #{ret.errors}"
  end
  
  def todo_show(id)
    todo = RemoteTodo.find(id)
    puts "# Todo.Show(#{id}) (user: #{blue RemoteTodo.user})"
    puts( todo.show_full_entry )
  end
  
  def todo_done(id,done_or_undone=true)
    puts "# Todo.Done(#{id}) (user: #{blue RemoteTodo.user})"
    pred "To Be implemented Yet :("
  end
  
  def todo_search(q)
    puts "# Todo.Search('#{q}') (user: #{blue RemoteTodo.user})"
    pred "To Be implemented Yet"
  end
  
  def init
    RemoteTodo.import_config()
  end

  def main()
    init()
      # Maybe you may want to check on ARGV
    unless ARGV.size > 0
      usage "Give me at least 1 argument" # Maybe default to list?!? 
    end
    # i dont need it for help :)
    case ARGV[0]
      when 'list' ;    todo_list()
      when 'show' ;    todo_show(ARGV[1])
      when 'done' ;    todo_done(ARGV[1],true)
      when 'add'  ;    todo_add(ARGV[1..-1].join(' ')) # all except last one
      else ;           usage "Unrecognized command: #{ARGV[0]}"
    end
  end

#########################################################
# real program...
main()